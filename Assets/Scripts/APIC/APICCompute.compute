

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitParticle


#pragma kernel AddParticles

#pragma kernel InitGrid
#pragma kernel P2G
#pragma kernel UpdateGrid
#pragma kernel G2P

#include "GPUData.cginc"


static const float3x3 identity = float3x3(1,0,0,0,1,0,0,0,1);

cbuffer cb
{
    int _NumberOfParticles;
    int _ActiveNumberOfParticles;

	float _DT;
};

cbuffer grid
{
	float4 _Start;
	uint _DimX;
	uint _DimY;
	uint _DimZ;
	float _H;
}

RWStructuredBuffer<ParticleData> _ParticlesDataBufferRead;
//Not used
RWStructuredBuffer<ParticleData> _ParticlesDataBufferWrite;
RWStructuredBuffer<ParticleData> _ParticlesDataBufferEmitWrite;

AppendStructuredBuffer<uint> _ParticlesIndexBufferActive;
ConsumeStructuredBuffer<uint> _ParticlesIndexBufferDead;

AppendStructuredBuffer<uint> _ParticlesIndexBufferInit;

RWStructuredBuffer<CellData> _Grid;

StructuredBuffer<float3> _CPUNewParticles;


[numthreads(8,1,1)]
void InitParticle(uint3 DTid : SV_DispatchThreadID)
{
	uint idx = DTid.x;

	_ParticlesDataBufferRead[idx].position = float3(0,0,0);
	_ParticlesDataBufferRead[idx].active = false;

	_ParticlesIndexBufferInit.Append(idx);
}
[numthreads(1,1,1)]
void AddParticles(uint3 DTid : SV_DispatchThreadID)
{
	uint idx = _ParticlesIndexBufferDead.Consume();
	uint newpid = DTid.x;

	ParticleData p = _ParticlesDataBufferRead[idx];
	p.active = true;
	p.mass = 1;
	p.position = _CPUNewParticles[newpid];
	p.velocity = float3(0, 0, 0);
	p.B = 0;

	_ParticlesDataBufferEmitWrite[idx] = p;
}


[numthreads(8,1,1)]
void InitGrid(uint3 DTid : SV_DispatchThreadID)
{
	uint idx = DTid.x;
	CellData c = _Grid[idx];
	c.mass = 0;
	c.mv = 0;
	c.force = 0;
	c.vel = 0;
	_Grid[idx] = c;
}

float N(float x)
{
    x = abs(x);

    if (x < 0.5f) return 0.75f - x * x;
    if (x < 1.5f) return 0.5f * (1.5f - x) * (1.5f - x);
    return 0;
}

float DevN(float x)
{
    float absx = abs(x);
    if (absx < 0.5f) return -2 * x;
    if (absx < 1.5f) return x > 0 ? absx - 1.5f : -(absx - 1.5f);
    return 0;
}

float3x3 InvD()
{
	return 4.0f * identity * _H * _H;
}

uint3 PPosToCIndex(float3 pos)
{
	return uint3(pos-_Start.xyz);
}

uint CIndexToCDIndex(uint3 idx)
{
	return idx.x + idx.y * _DimX + idx.z * _DimX * _DimY;
}

uint3 CDIndexToCIndex(uint idx)
{
	uint z = idx/(_DimX * _DimY);
	uint xy = idx%(_DimX * _DimY);

	return uint3(xy%_DimX, xy/_DimX, z);
}

float3 CIndexToCPos(uint3 idx)
{
	return _Start.xyz + (idx + 0.5f) * _H;
}

bool InGrid(uint3 idx)
{
	uint cdid = CIndexToCDIndex(idx);
	return 0<= cdid && cdid < _DimX * _DimY *_DimZ;
}
float GetWeight(float3 pos, int3 delta)
{
	int3 gindex = PPosToCIndex(pos) + delta;
	if (!InGrid(gindex)) return 0;

	float3 gpos = CIndexToCPos(gindex);
	float3 dis = pos - gpos;
	float3 invH = 1.0f / _H;
	dis *= invH;

	return  N(dis.x) * N(dis.y);// * N(dis.z);
}

[numthreads(8,1,1)]
void P2G (uint3 DTid : SV_DispatchThreadID)
{
    const uint CellID = DTid.x;
	CellData c = _Grid[CellID];
	[loop]
	for (int pi = 0; pi < _NumberOfParticles; ++pi)
	{
        ParticleData p = _ParticlesDataBufferRead[pi];
		if(!p.active) continue;
        // float2x2 apic = mul(p.B, inverse(p.D));
        float3x3 apic = mul(p.B, InvD());

        int3 gidx = PPosToCIndex(p.position);
        for (int gx = -1; gx <= 1; ++gx)
        {
            for (int gy = -1; gy <= 1; ++gy)
			{
				for(int gz = -1; gz <=1; ++gz)
				{
					int3 delta = int3(gx,gy,gz);
					int3 cid = gidx + delta;

					uint idx = CIndexToCDIndex(cid);
					if(CellID != idx) continue;

					if (InGrid(cid))
					{
						float3 gpos = CIndexToCPos(cid);
						float w = GetWeight(p.position, delta);

						c.mass += w * p.mass;
						c.mv += w * p.mass*(p.velocity  + mul(apic, gpos-p.position));
					}
				}
			}
		}
	}

	_Grid[CellID] = c;

}
[numthreads(8,1,1)]
void UpdateGrid (uint3 DTid : SV_DispatchThreadID)
{
	const uint CellID = DTid.x;
    CellData c = _Grid[CellID];

	uint3 cidx = CDIndexToCIndex(CellID);

    if (c.mass <= 0)
    {
		c.force = 0;
        c.mass = 0;
        c.mv = 0;
        c.vel = 0;
    }
    else
    {
        c.vel = c.mv / c.mass;

        float3 g = float3(0.0f,-9.8f, 0.0f);
        c.vel += _DT * (c.force / c.mass + g);
        if (cidx.x < 2 || cidx.x >= _DimX - 2) c.vel.x = 0;
        if (cidx.y < 2 || cidx.y >= _DimX - 2) c.vel.y = 0;
        if (cidx.z < 2 || cidx.z >= _DimX - 2) c.vel.z = 0;
    }
    

    _Grid[CellID] = c;

}
float3x3 Outer(float3 u, float3 v)
{
	return float3x3(u[0]*v[0], u[0]*v[1],u[0]*v[2],
					u[1]*v[0], u[1]*v[1],u[1]*v[2],
					u[2]*v[0], u[2]*v[1],u[2]*v[2]);


}

[numthreads(8, 1, 1)]
void G2P(uint3 DTid : SV_DispatchThreadID)
{
	const uint pid = DTid.x;
	ParticleData p = _ParticlesDataBufferRead[pid];
	if(!p.active) return;
	
    // float2x2 sum = 0;
    p.velocity = 0;
    p.B = 0;

	int3 gidx = PPosToCIndex(p.position);
	for (int gx = -1; gx <= 1; ++gx)
	{
		for (int gy = -1; gy <= 1; ++gy)
		{
			for(int gz = -1; gz <=1; ++gz)
			{
				int3 delta = int3(gx,gy,gz);
				int3 cid = gidx + delta;
				int idx = CIndexToCDIndex(cid);
				if (InGrid(cid))
				{
					float3 gpos = CIndexToCPos(cid);
					float w = GetWeight(p.position, delta);
					// float2 wd = ToWD(p, mx, my);
					float3 vel = _Grid[idx].vel;

					p.velocity += w * vel;
					p.B += w * Outer(vel, gpos-p.position);

					// sum+=Outer(vel,wd);
				}
			}
		}
	}

    p.position += _DT * p.velocity;
    p.position = clamp(p.position, _Start.xyz, float3(_DimX,_DimY,_DimZ) * _H);


	_ParticlesDataBufferRead[pid] = p;

}
