

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitParticle


#pragma kernel AddParticles
#pragma kernel CalGridDensity
#pragma kernel UpdateParticleVolume

#pragma kernel InitGrid
#pragma kernel P2G
#pragma kernel UpdateGrid
#pragma kernel G2P

#include "GPUData.cginc"
#include "Assets/Scripts/Common/Constant.hlsl"
#include "Assets/Scripts/Common/Grid.hlsl"
#include "Assets/Scripts/Common/Math.hlsl"
#include "Assets/Scripts/Common/SVD.hlsl"
 
cbuffer cb
{
    int _NumberOfParticles;
    int _ActiveNumberOfParticles;

	float _DT;
};


cbuffer mpm
{
	float _E;
	float _nu;
	float _mu;
	float _lambda;
	float _hardening;
}

RWStructuredBuffer<ParticleData> _ParticlesDataBufferRead;
//Not used
RWStructuredBuffer<ParticleData> _ParticlesDataBufferWrite;
RWStructuredBuffer<ParticleData> _ParticlesDataBufferEmitWrite;

AppendStructuredBuffer<uint> _ParticlesIndexBufferActive;
ConsumeStructuredBuffer<uint> _ParticlesIndexBufferDead;

AppendStructuredBuffer<uint> _ParticlesIndexBufferInit;

RWStructuredBuffer<CellData> _Grid;

StructuredBuffer<float3> _CPUNewParticles;


[numthreads(8,1,1)]
void InitParticle(uint3 DTid : SV_DispatchThreadID)
{
	uint idx = DTid.x;

	_ParticlesDataBufferRead[idx].position = float3(0,0,0);
	_ParticlesDataBufferRead[idx].type = 0;

	_ParticlesIndexBufferInit.Append(idx);
}
[numthreads(1,1,1)]
void AddParticles(uint3 DTid : SV_DispatchThreadID)
{
	uint idx = _ParticlesIndexBufferDead.Consume();
	uint newpid = DTid.x;

	ParticleData p = _ParticlesDataBufferRead[idx];
	p.type = 1;
	p.mass = 1;
	p.volume = 1;
	p.position = _CPUNewParticles[newpid];
	p.velocity = 0;
	p.B = 0;
	p.D = 0;
	p.Fe = Identity3x3;
	p.Fp = Identity3x3;

	_ParticlesDataBufferEmitWrite[idx] = p;
}
[numthreads(8,1,1)]
void CalGridDensity(uint3 DTid : SV_DispatchThreadID)
{
	float volume =  _H*_H*_H;
	uint idx = DTid.x;
	CellData c = _Grid[idx];
	c.mass /= volume;
	_Grid[idx] = c;
}
[numthreads(32, 1, 1)]
void UpdateParticleVolume(uint3 DTid : SV_DispatchThreadID)
{
	const uint pid = DTid.x;
	ParticleData p = _ParticlesDataBufferRead[pid];
	if(!p.type) return;

	float density = 0;
	int3 gidx = PPosToCIndex(p.position);
	for (int gx = -1; gx <= 1; ++gx)
	{
		for (int gy = -1; gy <= 1; ++gy)
		{
			for(int gz = -1; gz <=1; ++gz)
			{
				int3 delta = int3(gx,gy,gz);
				int3 cid = gidx + delta;

				uint idx = CIndexToCDIndex(cid);

				if (InGrid(cid))
				{
					float3 gpos = CIndexToCPos(cid);
					float w = GetWeight(p.position, delta);

					density += _Grid[idx].mass * w;
				}
			}
		}
	}

	p.volume = p.mass/density;
	_ParticlesDataBufferRead[pid] = p;
}
[numthreads(8,1,1)]
void InitGrid(uint3 DTid : SV_DispatchThreadID)
{
	uint idx = DTid.x;
	CellData c = _Grid[idx];
	c.mass = 0;
	c.mv = 0;
	c.force = 0;
	c.vel = 0;
	_Grid[idx] = c;
}
[numthreads(32,1,1)]
void P2G (uint3 DTid : SV_DispatchThreadID)
{
    const uint CellID = DTid.x;
	CellData c = _Grid[CellID];
	[loop]
	for (int pi = 0; pi < _NumberOfParticles; ++pi)
	{
        ParticleData p = _ParticlesDataBufferRead[pi];
		if(!p.type) continue;

        int3 gidx = PPosToCIndex(p.position);
        for (int gx = -1; gx <= 1; ++gx)
        {
            for (int gy = -1; gy <= 1; ++gy)
			{
				for(int gz = -1; gz <=1; ++gz)
				{
					int3 delta = int3(gx,gy,gz);
					int3 cid = gidx + delta;

					uint idx = CIndexToCDIndex(cid);
					if(CellID != idx) continue;

					if (InGrid(cid))
					{
						float3 gpos = CIndexToCPos(cid);
						float w = GetWeight(p.position, delta);
						float3 wd = GetWeightGradient(p.position, delta);


						float3x3 F = float3x3(p.Fe[0][0], p.Fe[0][1],0, p.Fe[1][0], p.Fe[1][1],0,0,0,1);
						float3x3 R = 0;
						float j = determinant(F);
						float volume = p.volume;
						float3x3 Dinv = InvD();
						float3x3 apic = mul(p.B, Dinv);

						float e = 1;
						float mu = _mu;
						float lambda = _lambda;
						if(p.type == 2)
						{
							float jp = determinant(p.Fp);
							jp = clamp(jp, 0.6f,20.0f);
							e = exp(_hardening * (1 - jp));
						}
						else
						if(p.type == 3)
						{
							mu = 0;
							p.Fe = float3x3(j,0,0,0,1,0,0,0,1);
						}

						float mup = mu * e;
						float lambdap = lambda * e;

						if(Is2D())
						{
							float3x3 S = 0;
							GetPolarDecomposition2D(F, R, S);

							R[2][2] = S[2][2] = 1;
						}
						else
						{
							float3x3 U ;
							float3 d;
							float3x3 V;

							GetSVD3D(F, U, d, V);
							float3x3 D = float3x3(d[0], 0, 0, 0, d[1], 0, 0, 0, d[2]);
							R = mul(U, transpose(V));
						}
						
						j = clamp(j, 0.6f,20.0f);
						float3x3 FinvT = transpose(inverse(F));
						float3x3 P = (2.0f * mup * (F - R)) + lambdap * (j - 1.0f) * j * FinvT;
						float3x3 stress = 1.0f / j * mul(P, transpose(F));

						c.mass += w * p.mass;
						c.mv += w * p.mass * (p.velocity + mul(apic, (gpos-p.position)));
						c.force += -volume * mul(stress, wd);

					}
				}
			}
		}
	}
	_Grid[CellID] = c;

}

[numthreads(32,1,1)]
void UpdateGrid(uint3 DTid : SV_DispatchThreadID)
{
	const uint CellID = DTid.x;
    CellData c = _Grid[CellID];

	uint3 cidx = CDIndexToCIndex(CellID);

    if (c.mass <= 0)
    {
		c.force = 0;
        c.mass = 0;
        c.mv = 0;
        c.vel = 0;
    }
    else
    {
        c.vel = c.mv / c.mass;

        float3 g = float3(0.0f,-9.8f, 0.0f);
        c.vel += _DT * (c.force / c.mass + g);
        if (cidx.x < 2 || cidx.x >= _DimX - 2) c.vel.x = 0;
        if (cidx.y < 2 || cidx.y >= _DimY - 2) c.vel.y = 0;
        if (cidx.z < 2 || cidx.z >= _DimZ - 2) c.vel.z = 0;
    }
    

    _Grid[CellID] = c;

}
float3x3 Outer(float3 u, float3 v)
{
    if(Is2D())
    {
        return float3x3(u[0]*v[0], u[0]*v[1],0,
                        u[1]*v[0], u[1]*v[1],0,
                        0,0,0);
    }
    else
    {
        return float3x3(u[0]*v[0], u[0]*v[1],u[0]*v[2],
                        u[1]*v[0], u[1]*v[1],u[1]*v[2],
                        u[2]*v[0], u[2]*v[1],u[2]*v[2]);
    }
}
[numthreads(32, 1, 1)]
void G2P(uint3 DTid : SV_DispatchThreadID)
{
	const uint pid = DTid.x;
	ParticleData p = _ParticlesDataBufferRead[pid];
	if(!p.type) return;
	
    float3x3 sum = 0;
    p.velocity = 0;
    p.B = 0;

	int3 gidx = PPosToCIndex(p.position);
	for (int gx = -1; gx <= 1; ++gx)
	{
		for (int gy = -1; gy <= 1; ++gy)
		{
			for(int gz = -1; gz <=1; ++gz)
			{
				int3 delta = int3(gx,gy,gz);
				int3 cid = gidx + delta;
				int idx = CIndexToCDIndex(cid);
				if (InGrid(cid))
				{
					float3 gpos = CIndexToCPos(cid);
					float w = GetWeight(p.position, delta);
					float3 wd = GetWeightGradient(p.position, delta);
					float3 vel = _Grid[idx].vel;

					p.velocity += w * vel;

					p.B += w * (Is2D()?Math_OuterProduct2D(vel, gpos-p.position):Math_OuterProduct(vel, gpos-p.position));
					sum += Is2D()?Math_OuterProduct2D(vel, wd):Math_OuterProduct(vel, wd);

				}
			}
		}
	}

    p.position += _DT * p.velocity;
    p.position = clamp(p.position, _Start.xyz, float3(_DimX,_DimY,_DimZ) * _H);

    float3x3 F = p.Fe;
    F = mul(Identity3x3 + _DT * sum, F);
	if(p.type == 2)
	{
		if(Is2D())
		{
			float2x2 F2d = float2x2(F[0][0],F[0][1],F[1][0],F[1][1]);
			float2x2 Fp2d = float2x2(p.Fp[0][0],p.Fp[0][1],p.Fp[1][0],p.Fp[1][1]);
			float2x2 U;
			float2 d;
			float2x2 V;
			GetSVD2D(F2d, U, d, V);
			float dl = 1.0f - 2.5e-2f;
			float du = 1.0f + 7.5e-3f;
			d = clamp(d, float2(dl,dl), float2(du,du));
			float2x2 D = float2x2(d[0], 0, 0, d[1]);

			float2x2 Fpn1 = mul(F2d, Fp2d);
			float2x2 Fen1 = mul(mul(U, D),transpose(V));
			Fpn1 = mul(mul(mul(V, inverse(D)), transpose(U)), Fpn1);

			p.Fe = Identity3x3;
			p.Fe[0][0] = Fen1[0][0];
			p.Fe[0][1] = Fen1[0][1];
			p.Fe[1][0] = Fen1[1][0];
			p.Fe[1][1] = Fen1[1][1];

			p.Fp = Identity3x3;
			p.Fp[0][0] = Fpn1[0][0];
			p.Fp[0][1] = Fpn1[0][1];
			p.Fp[1][0] = Fpn1[1][0];
			p.Fp[1][1] = Fpn1[1][1];
		}
	}
	else
	{
		p.Fe = F;
	}

	_ParticlesDataBufferRead[pid] = p;

}
